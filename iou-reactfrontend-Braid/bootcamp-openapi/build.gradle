buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://software.r3.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

configurations {
    braid
}

dependencies {
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testCompileClasspath fileTree(dir: 'lib/dependencies', include: '*.jar')
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "$corda_release_group:corda-test-utils:$corda_release_version"

    //Braid
    braid 'io.bluebank.braid:braid-server:4.1.2-RC13'

}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required for shell commands.
}

cordapp {
    targetPlatformVersion 4
    minimumPlatformVersion 4
    contract {
        name "Bootcamp Contracts"
        vendor "R3"
        licence "A liberal, open source licence"
        versionId 1
    }
    workflow {
        name "Bootcamp Flows"
        vendor "R3"
        licence "A really expensive proprietary licence"
        versionId 1
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp { deploy = true }
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        cordapps = []
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10005")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10006
        rpcSettings {
            address("localhost:10007")
            adminAddress("localhost:10008")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
    }
    node {
        name "O=PartyC,L=Lagos,C=NG"
        p2pPort 10009
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10011")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
    }
}

/*
 * The following is required for now, while Braid Server OpenAPI server is not
 * integrated with the gradle corda plugin
 */

task startBraidPartyA {
    doLast {
        startBraid("PartyA", "localhost:10004", 9004)
    }
}

task startBraidPartyB {
    doLast {
        startBraid("PartyB", "localhost:10009", 9009)
    }
}

def startBraid(partyName, rpcHostAndPort, port) {
    println("starting braid for $partyName with rpc $rpcHostAndPort and port $port ")
    def partyDirectory = "build/nodes/${partyName}"
    def cordappDirectory = "${partyDirectory}/cordapps"
    // the following two effectively forces authentication via the REST API by passing
    // empty strings for user and password. replace this with "user1" and "test" to
    // automatically auth with node. N.B. configuring a username and password for RPC
    // disables the security at the REST API and is NOT secure!
    def rpcuser = "user1"
    // empty string
    def rpcpassword = "test"
    // empty string
    def braidPath = braidServerPath()
    javaexec {
        systemProperty "file.encoding", "UTF-8"
        // need this for braid to work with Windows at present
        main = "-jar"
        args = [
                braidPath,
                rpcHostAndPort,
                rpcuser,
                rpcpassword,
                port,
                3, // openapi v3 only supported
                cordappDirectory
        ]
    }
}

def braidServerPath() {
    // we just use the location of the braid-server dependency
    return configurations.braid.first()
}

